@page "/workouts/{UserId}"
@inject IGenericRepository<Workout> WRepo
@inject IGenericRepository<ExerciseLog> ERepo
@inject IGenericRepository<Exercise> XRepo
@using DBAccess
@using DBAccess.Repository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@attribute [StreamRendering]
<PageTitle>Workouts</PageTitle>

<h3>Individual workouts&ensp;<a href="/addwork/@UserId" class="addbtn">Log new workout</a></h3>

<br />
@if (workouts == null || logs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="workout-grid">
    @foreach(var workout in workouts)
    {
        <div class="workout">
            <h4>Workout on @workout.Date.ToShortDateString()</h4>
                Lasted for @workout.Duration minutes.&ensp;<button class="delbtn" @onclick="(() => DeleteWorkout(workout))">Delete</button><br /><br />
            <h5>Exercises:</h5>
            <ul>
                    @foreach (var log in logs.Where(l => l.WorkoutId == workout.Id))
                    {
                        Exercise? x = XRepo.GetItemById(log.ExerciseId);
                        <li>
                            @if (x != null)
                            {
                                @x.Name
                            }
                            else
                            {
                                <span>Exercise</span>
                            }&ensp; <button class="delbtn" @onclick="(() => DeleteLog(log))">Delete exercise</button>
                                <br />
                            @if(log.Sets!=null){@log.Sets <span>sets of&nbsp;</span>}
                            @if(log.Reps!=null){@log.Reps <span>reps;&nbsp;</span>}
                            @if(log.Weight!=null){@log.Weight <span>kg;&nbsp;</span>}
                            @if(log.Distance!=null){@log.Distance <span>km;&nbsp;</span>}
                            @if(log.Duration!=null){@log.Duration <span>minutes</span>}
                        </li>
                    }
            </ul>
            &nbsp;<a href="/addlog/@workout.Id+@UserId" class="addbtn">Log a new exercise</a>
        </div>
    }
    </div>
}
@code {
    [Parameter]
    public String? UserId { get; set; }
    private Workout[]? workouts = null;
    private ExerciseLog[]? logs = null;
    protected override async Task OnInitializedAsync()
    {
        var all = await WRepo.GetItemsAsync();
        logs = await ERepo.GetItemsAsync();
        if (UserId == null) throw new ArgumentNullException();
        workouts = all.Where(w => w.UserId == Int32.Parse(UserId)).ToArray();
    }
    async Task DeleteWorkout(Workout workout)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Delete this workout?");
        if (confirmed)
        {
            WRepo.DeleteItem(workout.Id);
            WRepo.Save();
            await OnInitializedAsync();
        }
    }
    async Task DeleteLog(ExerciseLog log)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Remove logged exercise?");
        if (confirmed)
        {
            ERepo.DeleteItem(log.WorkoutId, log.ExerciseId);
            ERepo.Save();
            await OnInitializedAsync();
        }
    }
}
