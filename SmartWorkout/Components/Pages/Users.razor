@page "/users"
@inject IGenericRepository<User> Repo
@using DBAccess
@using DBAccess.Repository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<h4>Client list:</h4><br />
<a href="/adduser" class="linkbtn">Add User</a><br /><br />
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form method="get" @onsubmit="Search" @formname="search">
        <div>
            <label>
                Search by name:
                <InputText @bind-Value="Searchtext" />
                <button class="actionbtn" type="submit">&#x1F50E;</button>
            </label>
        </div>
    </form>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Options</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Weight</th>
                <th>Age</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>
                        <button class="actionbtn" title="Delete" @onclick="(() => DeleteUser(user))">&#10060;</button>
                        <button class="actionbtn" title="Edit" @onclick="(() => ModifyUser(user))">&#x1F527;</button>
                        <button class="actionbtn" title="View Workouts" @onclick="(() => UserWorkouts(user))">&#x1F3CB;</button>
                    </td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td>@(user.Weight.ToString() ?? "Weight unknown")</td>
                    <td>@(user.Age.ToString() ?? "Age unknown")</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    public String? Searchtext { get; set; }
    private User[]? users = null;
    private User[]? orig = null;
    protected override async Task OnInitializedAsync()
    {
        orig = await Repo.GetItemsAsync();
        users = orig;
    }
    async Task DeleteUser(User user)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Delete " + user.Name + "?");
        if (confirmed)
        {
            Repo.DeleteItem(user.Id);
            Repo.Save();
            users = Repo.GetItems();
        }
    }
    void ModifyUser(User user)
    {
        NavigationManager.NavigateTo("modifyuser/"+user.Id);
    }
    void UserWorkouts(User user)
    {
        NavigationManager.NavigateTo("workouts/" + user.Id);
    }
    private void Search()
    {
        if (orig != null && Searchtext != null)
        {
            User[] result = orig.Where(u => (u.Name + " " + u.Surname).Contains(Searchtext)).ToArray();
            users = result;
        }
    }
}